datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  roleId         Int?     
  commissionRate Decimal?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("users")
  role           Role?         @relation(fields: [roleId], references: [id])
  products       Product[]
  orders         Order[]
  reviews        Review[]
  cartItems      Cart[]
  coupons        Coupon[]
  payout         Payout[]
  couponUsage    CouponUsage[]
}

model Role {
  id          Int             @id @default(autoincrement())  
  name        String          @unique                    
  desc        String?                
  createdAt   DateTime        @default(now())              
  updatedAt   DateTime        @updatedAt                    

  @@map("roles")               
  users           User[]
  rolePermissions RolePermission[]
}

model Permission {
  id          Int               @id @default(autoincrement())  
  name        String            @unique               
  desc        String?         
  createdAt   DateTime          @default(now())               
  updatedAt   DateTime          @updatedAt                   

  @@map("permissions")          
  rolePermissions RolePermission[]
}

model RolePermission {
  id            Int         @id @default(autoincrement())
  roleId        Int         
  permissionId  Int      
  createdAt     DateTime    @default(now())  
  updatedAt     DateTime    @updatedAt       

  @@map("role_permissions")  
  @@unique([roleId, permissionId])  

  role        Role          @relation(fields: [roleId], references: [id])  
  permission  Permission    @relation(fields: [permissionId], references: [id])  
}


model Category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  parentId  Int?
  imageUrl  String?  
  createdAt DateTime    @default(now())  
  updatedAt DateTime    @updatedAt 

  @@map("categorys")  
  parent    Category?   @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[]  @relation("CategoryParent")
  products  Product[]
  coupons Coupon[]
}

model Product {
  id            Int         @id @default(autoincrement())
  sellerId      Int
  categoryId    Int?
  name          String
  desc          String?
  regularPrice  Decimal? 
  sellPrice     Decimal
  stock         Int
  imageUrl      String
  createdAt     DateTime    @default(now())  
  updatedAt     DateTime    @updatedAt       

  @@map("products")  
  
  seller        User        @relation(fields: [sellerId], references: [id])
  category      Category?   @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     Cart[]
  productImages ProductImage[]
  coupons        Coupon[] 
  stockMovements StockMovement[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt       

  @@map("product_images")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, imageUrl]) 
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalPrice  Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())  
  updatedAt   DateTime    @updatedAt       

  @@map("orders")
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payments    Payment[]
  couponUsage CouponUsage[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Decimal
  commission Decimal?
  createdAt  DateTime    @default(now())  
  updatedAt  DateTime    @updatedAt       

  @@map("order_items")
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id                 Int            @id @default(autoincrement())
  orderId            Int
  paymentMethod      PaymentMethod
  paymentStatus      PaymentStatus  @default(PENDING)
  transactionId      String?
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt       

  @@map("payments")
  order     Order    @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payout {
  id          Int      @id @default(autoincrement())
  sellerId    Int
  amount      Decimal
  status      PayoutStatus @default(PENDING)
  createdAt   DateTime  @default(now())  
  updatedAt   DateTime  @updatedAt       

  @@map("payouts")
  seller      User  @relation(fields: [sellerId], references: [id])
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt       

  @@map("reviews")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt       

  @@map("carts")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}


model Coupon {
  id            Int          @id @default(autoincrement())
  sellerId      Int?        
  code          String       @unique
  discount      Decimal 
  discountType  DiscountType @default(PERCENTAGE)
  minOrderAmount Decimal? 
  maxDiscount   Decimal? 
  expiresAt     DateTime 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  

  @@map("coupons")
  products      Product[]
  categories    Category[]
  seller        User?      @relation(fields: [sellerId], references: [id]) 
  couponUsage CouponUsage[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}


model CouponUsage {
  id        Int      @id @default(autoincrement())
  userId    Int
  couponId  Int
  orderId   Int
  discount  Decimal  
  createdAt DateTime @default(now())  

  @@map("coupon_usages")
  user      User    @relation(fields: [userId], references: [id])
  coupon    Coupon  @relation(fields: [couponId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}


model StockMovement {
  id          Int      @id @default(autoincrement())
  productId   Int
  change      Int      // +ve (increase), -ve (decrease)
  reason      String?
  createdAt   DateTime  @default(now())  

  @@map("stock_movements")
  product     Product  @relation(fields: [productId], references: [id])
}
